// File: crates/storm-ffi/storm_core.h
// Auto-generated C header for StormCore FFI
// This would be generated by cbindgen

#ifndef STORM_CORE_H
#define STORM_CORE_H

#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif

// Forward declarations
typedef struct StormHandle StormHandle;

// Configuration structures
typedef struct {
    bool enable_rendering;
    bool enable_audio;
    bool enable_physics;
    bool enable_ai;
    bool debug_mode;
    uint32_t platform;
} CStormConfig;

typedef struct {
    const char* name;
    const char* url;
    uint32_t protocol;
} CWorldConfig;

// Math structures
typedef struct {
    float x;
    float y;
    float z;
} CVec3;

typedef struct {
    float x;
    float y;
    float z;
    float w;
} CQuat;

typedef struct {
    CVec3 position;
    CQuat rotation;
    CVec3 scale;
} CTransform;

// Error codes
typedef enum {
    STORM_SUCCESS = 0,
    STORM_INITIALIZATION_FAILED = 1,
    STORM_INVALID_HANDLE = 2,
    STORM_INVALID_PARAMETER = 3,
    STORM_NETWORK_ERROR = 4,
    STORM_PROTOCOL_ERROR = 5,
    STORM_ECS_ERROR = 6,
    STORM_AI_ERROR = 7,
    STORM_RENDERING_ERROR = 8,
    STORM_AUDIO_ERROR = 9,
    STORM_PHYSICS_ERROR = 10,
    STORM_ASSET_ERROR = 11,
    STORM_PLATFORM_NOT_SUPPORTED = 12,
    STORM_GENERIC_ERROR = 99
} StormErrorCode;

// Callback types
typedef void (*ErrorCallback)(StormErrorCode error_code, const char* message, void* user_data);
typedef void (*EntityCallback)(uint64_t entity_id, void* user_data);

// Core functions
void storm_init_logging(void);
StormHandle* storm_create_engine(const CStormConfig* config);
void storm_free_handle(StormHandle* handle);
StormErrorCode storm_connect_to_world(StormHandle* handle, const CWorldConfig* world_config);
StormErrorCode storm_update(StormHandle* handle, float delta_time);
StormErrorCode storm_shutdown(StormHandle* handle);

// ECS functions
uint64_t storm_create_entity(StormHandle* handle);
StormErrorCode storm_set_entity_transform(StormHandle* handle, uint64_t entity_id, const CTransform* transform);
StormErrorCode storm_get_entity_transform(StormHandle* handle, uint64_t entity_id, CTransform* out_transform);

// Utility functions
const char* storm_get_version(void);
const char* storm_get_last_error(void);

#ifdef __cplusplus
}
#endif

#endif // STORM_CORE_H